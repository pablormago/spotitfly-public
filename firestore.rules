rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // --- USERS ---
    match /users/{uid} {
      allow read: if true;
      // Crea/actualiza solo el propio usuario
      allow create, update: if isSignedIn() && request.auth.uid == uid;

      // SubcolecciÃ³n usada para "unread spots"
      match /spotReads/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }
      // SubcolecciÃ³n usada para "favoritos"
      match /favorites/{spotId} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;
      }
    }

    // --- SPOTS ---
    match /spots/{spotId} {
      allow read: if true;

      // Crear â†’ logado y que createdBy == uid
      allow create: if isSignedIn()
        && request.resource.data.createdBy == request.auth.uid
        // Inicializar visibilidad pÃºblica por defecto (si la envÃ­as desde cliente)
        && !(request.resource.data.keys().hasAny(['visibility','moderation']))
        ;

      // Actualizar:
      // - Creador puede editar (pero NO puede tocar visibility ni moderation)
      // - Otros logados solo rating & contadores (como tenÃ­as)
      allow update: if isSignedIn() && (
        // Creador
        (
          resource.data.createdBy == request.auth.uid
          &&
          !request.resource.data.diff(resource.data).changedKeys().hasAny(['visibility', 'moderation'])
        )
        ||
        // Otros: solo campos de rating/contadores
        request.resource.data.diff(resource.data).changedKeys().hasOnly([
          'ratings', 'rating', 'averageRating', 'ratingsCount',
          'commentCount', 'lastCommentAt'
        ])
      );

      // Borrar â†’ solo creador
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;

      // --- COMMENTS ---
      match /comments/{commentId} {
        allow read: if true;

        // Crear â†’ logado y que authorId == uid
        allow create: if isSignedIn()
          && request.resource.data.authorId == request.auth.uid
          // No permitir que el cliente ponga visibility/moderation al crear
          && !(request.resource.data.keys().hasAny(['visibility','moderation']))
          ;

        // Editar â†’ solo autor y sin tocar visibility/moderation
        allow update: if isSignedIn()
          && resource.data.authorId == request.auth.uid
          && !request.resource.data.diff(resource.data).changedKeys().hasAny(['visibility','moderation']);

        // Borrar â†’ solo autor (no cambia campos)
        allow delete: if isSignedIn()
          && resource.data.authorId == request.auth.uid;
      }
    }

    // --- CHATS ---
    match /chats/{chatId} {

      // ðŸ”‘ Necesario para que Storage rules hagan get(/databases/.../chats/{chatId})
      allow get: if isSignedIn()
        && request.auth.uid in resource.data.participants;

      // Lectura/listado desde cliente (consultas) â†’ solo participantes
      allow list, read: if isSignedIn()
        && request.auth.uid in resource.data.participants;

      // Actualizar/borrar â†’ solo participantes
      allow update, delete: if isSignedIn()
        && request.auth.uid in resource.data.participants;

      // Crear â†’ logado y el creador debe estar en participants
      allow create: if isSignedIn()
        && request.auth.uid in request.resource.data.participants;

      // --- MESSAGES ---
      match /messages/{msgId} {
        // Leer â†’ solo participantes
        allow read: if isSignedIn()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        // Crear â†’ participante y senderId == uid (mensajes de soporte los genera la Function vÃ­a Admin SDK)
        allow create: if isSignedIn()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
          && request.resource.data.senderId == request.auth.uid;

        // Borrar â†’ solo autor del mensaje
        allow delete: if isSignedIn()
          && resource.data.senderId == request.auth.uid;
      }
    }

    // --- REPORTS ---
    match /reports/{reportId} {
      // Crear â†’ autenticado + reporterId == uid + validaciÃ³n mÃ­nima de payload
      allow create: if isSignedIn()
        && request.resource.data.reporterId == request.auth.uid
        && request.resource.data.type in ['comment','spot','user']
        && request.resource.data.targetId is string
        && request.resource.data.reason is string;

      // Solo backend/admin (Admin SDK) puede leer/actualizar/borrar
      allow read, update, delete: if false;
    }
  }
}
